name: Secret Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for complete scan
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload SARIF report
        if: failure()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  detect-secrets:
    name: Detect Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets --version
      
      - name: Run detect-secrets
        run: |
          # Create baseline if it doesn't exist
          if [ ! -f .secrets.baseline ]; then
            detect-secrets scan --all-files > .secrets.baseline
          fi
          
          # Scan for new secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
      
      - name: Fail if secrets detected
        run: |
          if detect-secrets scan --all-files | grep -q "secret"; then
            echo "❌ Secrets detected in codebase!"
            detect-secrets scan --all-files
            exit 1
          fi

  verify-env-files:
    name: Verify Environment Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for committed .env files
        run: |
          # List of files that should never be committed
          FORBIDDEN_FILES=(
            ".env"
            ".env.local"
            ".env.production"
            ".env.development"
            "secrets.yaml"
            "secrets.json"
            "*.key"
            "*.pem"
          )
          
          FOUND_FILES=()
          for pattern in "${FORBIDDEN_FILES[@]}"; do
            while IFS= read -r file; do
              if [ -n "$file" ]; then
                FOUND_FILES+=("$file")
              fi
            done < <(find . -name "$pattern" -type f 2>/dev/null | grep -v node_modules | grep -v .git)
          done
          
          if [ ${#FOUND_FILES[@]} -gt 0 ]; then
            echo "❌ Found forbidden files in repository:"
            printf '%s\n' "${FOUND_FILES[@]}"
            exit 1
          else
            echo "✅ No forbidden environment files found"
          fi
      
      - name: Check for hardcoded secrets in code
        run: |
          # Check for non-VITE environment variables in frontend
          if grep -r "process\.env\." src/ | grep -v "VITE_" | grep -v "test" | grep -v "spec"; then
            echo "❌ Found non-VITE environment variables in frontend code!"
            echo "Frontend should only access VITE_ prefixed variables"
            exit 1
          fi
          
          # Check for hardcoded API keys
          if grep -rE "(sk-[a-zA-Z0-9]{48}|sk-ant-[a-zA-Z0-9-]{95}|gsk_[a-zA-Z0-9]{52})" src/ scripts/; then
            echo "❌ Found hardcoded API keys!"
            exit 1
          fi
          
          echo "✅ No hardcoded secrets found"

  # Make this a required status check in GitHub branch protection
  security-gate:
    name: Security Gate
    needs: [gitleaks, detect-secrets, verify-env-files]
    runs-on: ubuntu-latest
    steps:
      - name: Security checks passed
        run: echo "✅ All security checks passed!"