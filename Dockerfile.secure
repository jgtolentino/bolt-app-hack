# Secure multi-stage Dockerfile
# No secrets are ever baked into image layers

# Build stage - no secrets needed
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY vite.config.ts ./
COPY tsconfig*.json ./

# Install dependencies (public packages only)
RUN npm ci --only=production

# Copy source code
COPY src ./src
COPY public ./public
COPY index.html ./

# Build the application (no secrets needed for build)
RUN npm run build

# Runtime stage - secrets provided at runtime
FROM nginx:alpine

# Install tools for reading secrets
RUN apk add --no-cache bash

# Copy built files from builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Runtime configuration script
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Create runtime config that will be populated with secrets
RUN mkdir -p /usr/share/nginx/html/config

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost || exit 1

# Entrypoint reads secrets at runtime
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]

# This Dockerfile:
# ✅ Never uses ARG for secrets
# ✅ Never has secrets in RUN commands
# ✅ Reads secrets from mounted files at runtime
# ✅ Keeps image layers clean